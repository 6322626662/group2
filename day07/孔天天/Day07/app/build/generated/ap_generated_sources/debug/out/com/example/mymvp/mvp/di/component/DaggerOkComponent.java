// Generated by Dagger (https://dagger.dev).
package com.example.mymvp.mvp.di.component;

import com.example.mymvp.mvp.di.module.OkManager;
import com.example.mymvp.mvp.di.module.OkManager_ProApiServiceFactory;
import com.example.mymvp.mvp.mvp.model.RxOpretorlmpl;
import com.example.mymvp.mvp.mvp.model.RxOpretorlmpl_MembersInjector;
import com.example.mymvp.mvp.mvp.model.api.ApiService;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerOkComponent implements OkComponent {
  private Provider<ApiService> proApiServiceProvider;

  private DaggerOkComponent(OkManager okManagerParam) {

    initialize(okManagerParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static OkComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final OkManager okManagerParam) {
    this.proApiServiceProvider = DoubleCheck.provider(OkManager_ProApiServiceFactory.create(okManagerParam));
  }

  @Override
  public void getSingleAPIService(RxOpretorlmpl lmpl) {
    injectRxOpretorlmpl(lmpl);}

  private RxOpretorlmpl injectRxOpretorlmpl(RxOpretorlmpl instance) {
    RxOpretorlmpl_MembersInjector.injectMApiService(instance, proApiServiceProvider.get());
    return instance;
  }

  public static final class Builder {
    private OkManager okManager;

    private Builder() {
    }

    public Builder okManager(OkManager okManager) {
      this.okManager = Preconditions.checkNotNull(okManager);
      return this;
    }

    public OkComponent build() {
      if (okManager == null) {
        this.okManager = new OkManager();
      }
      return new DaggerOkComponent(okManager);
    }
  }
}
